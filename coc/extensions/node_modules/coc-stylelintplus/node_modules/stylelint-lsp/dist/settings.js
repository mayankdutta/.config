"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultClientSettings = void 0;
const tslib_1 = require("tslib");
const vscode_uri_1 = require("vscode-uri");
const stylelint_1 = tslib_1.__importDefault(require("stylelint"));
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
const path_1 = tslib_1.__importDefault(require("path"));
exports.defaultClientSettings = {
    autoFixOnFormat: false,
    autoFixOnSave: false,
    config: undefined,
    configFile: undefined,
    configOverrides: undefined,
    enable: true,
    validateOnSave: true,
    validateOnType: true,
};
class Settings {
    constructor(connection) {
        this.connection = connection;
        this.supportsConfigurationRequests = false;
        this.globalSettings = Promise.resolve({
            ...exports.defaultClientSettings,
            stylelint: stylelint_1.default,
        });
        this.documentToSettings = new Map();
        this.pathToStylelint = new Map();
        this._supportedCodeActionLiterals = [];
    }
    initialize(capabilities) {
        this.supportsConfigurationRequests = Boolean(capabilities.workspace && capabilities.workspace.configuration);
        this._supportedCodeActionLiterals =
            capabilities.textDocument &&
                capabilities.textDocument.codeAction &&
                capabilities.textDocument.codeAction.codeActionLiteralSupport
                ? capabilities.textDocument.codeAction.codeActionLiteralSupport
                    .codeActionKind.valueSet
                : [];
    }
    resolve(document) {
        if (!this.supportsConfigurationRequests) {
            return this.globalSettings;
        }
        const uri = document.uri;
        const cached = this.documentToSettings.get(uri);
        if (cached) {
            return cached;
        }
        const promise = this.connection.workspace
            .getConfiguration({ scopeUri: uri, section: "" })
            .then((settings) => {
            const stylelint = this.resolveStylelint(uri);
            return {
                ...exports.defaultClientSettings,
                ...settings.stylelintplus,
                stylelint,
            };
        });
        this.documentToSettings.set(uri, promise);
        return promise;
    }
    resolveStylelint(uri) {
        let stylelint = stylelint_1.default;
        const parsedUri = vscode_uri_1.URI.parse(uri);
        if (parsedUri.scheme === "file") {
            const dirname = path_1.default.dirname(parsedUri.fsPath);
            const stylelintPath = resolve_from_1.default.silent(dirname, "stylelint");
            if (stylelintPath) {
                const maybeStylelint = this.pathToStylelint.get(stylelintPath);
                if (maybeStylelint) {
                    stylelint = maybeStylelint;
                }
                else {
                    this.connection.tracer.log(`stylelint found at ${stylelintPath}`);
                    stylelint = require(stylelintPath);
                    this.pathToStylelint.set(stylelintPath, stylelint);
                }
            }
        }
        return stylelint;
    }
    clientConfigurationChanged(params) {
        if (this.supportsConfigurationRequests) {
            this.documentToSettings.clear();
        }
        else if (params.settings.stylelintplus) {
            this.globalSettings = Promise.resolve({
                ...exports.defaultClientSettings,
                ...params.settings.stylelintplus,
                stylelint: stylelint_1.default,
            });
        }
    }
    closeDocument(document) {
        this.documentToSettings.delete(document.uri);
    }
    get supportedCodeActionLiterals() {
        return this._supportedCodeActionLiterals;
    }
}
exports.default = Settings;
